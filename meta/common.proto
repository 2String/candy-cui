syntax = "proto3";
package candy.meta;

import weak "gogoproto/gogo.proto";

option go_package = "meta";

// RequestHeader Gate向后端发请求时，带上这个头，方便记录具体操作信息.
message RequestHeader {
    int64 User = 1;
}

message ResponseHeader {
    int32 Code = 1;
    string Msg = 2;
}

enum Relation {
    // 没关系, 已删除
    Del     = 0;
    // 添加
    Add     = 1;
    // 确认
    Confirm = 2;
    // 拒绝
    Refuse  = 4;
}


// PushID 用户的上一条消息ID,用户ID
message PushID {
    int64 User      = 1;
    int64 Before    = 2;
} 


// Event 事件（消息类型）
enum Event {
    //普通聊天的消息下推
    None = 0;
    //群消息
    Group = 1;
    //好友关系
    Friend = 2;
    //上线
    Online = 3;
    //下线
    Offline = 4;
    //通知
    Notice = 5;
}

message Message {
    // ID 客户端发送过来时这个字段为0， gate收到后写入实际从master处获取到的消息ID
    int64  ID     = 1;
    // Before 前一第消息的ID，用来确定是否有消息丢失
    int64  Before = 2;
    // Group 如果当前为群聊，设置为群组ID, 否则为0
    int64  Group  = 3;
    // From 发消息的人的ID
    int64  From   = 4;
    // To 如果当前为私聊，这个设置为收消息用户的ID, 否则为0
    int64  To     = 5;
    string Body   = 6;
}

// UserInfo 用户信息
message UserInfo {
    int64   ID          = 1;
    string  Name        = 2;
    string  Password    = 3;
    string  NickName    = 4;
    string  Avatar      = 5;
    string  Signature   = 6;
}

// UserList 用户列表
message UserList {
    repeated UserInfo Users = 1;
}


// GroupInfo 群信息，目前只有名字，公告，头像
message GroupInfo {
    bool    Active  = 1;
    int64   ID      = 2;
    int64   Owner   = 3;
    string  Name    = 4;
    string  Avatar  = 5;
    string  Notice  = 6;

    // Admins 管理员
    repeated int64 Admins = 7;
    // Member 成员
    repeated int64 Member = 8;
}

// GroupList 群组列表
message GroupList {
    repeated GroupInfo Groups = 1;
}

// FriendList 好友列表
message FriendList {
    repeated int64 Users = 1;
}

// 下推的消息，有系统消息(加群，加好友，上线通知啥的)，正常聊天消息
message PushMessage {
    //消息类型，如好友，群，通知， 上线，下线之类的操作
    Event       Event   = 1;
    // 关系操作，加好友，删除好友，T出群，加入群
    Relation    Operate = 2;
    // 具体消息
    Message     Msg     = 3[(gogoproto.nullable) = false];
    // 这消息到底是发给用户的，还是发给群的
    bool        ToUser  = 4;
}


// PushRequest 推送的消息.
message PushRequest {
    repeated PushID ID = 1 [(gogoproto.nullable) = false];
    PushMessage Msg = 2 [(gogoproto.nullable) = false];
}

// PushResponse 可能返回节点错误或其它错误信息
message PushResponse {
    ResponseHeader header = 1;
}
