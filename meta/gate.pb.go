// Code generated by protoc-gen-gogo.
// source: gate.proto
// DO NOT EDIT!

package meta

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GateStreamRequest ID userID, token sessionID
type GateStreamRequest struct {
	ID    int64 `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Token int64 `protobuf:"varint,2,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
}

func (m *GateStreamRequest) Reset()                    { *m = GateStreamRequest{} }
func (m *GateStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*GateStreamRequest) ProtoMessage()               {}
func (*GateStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{0} }

type GateFindUserRequest struct {
	User string `protobuf:"bytes,1,opt,name=User,json=user,proto3" json:"User,omitempty"`
}

func (m *GateFindUserRequest) Reset()                    { *m = GateFindUserRequest{} }
func (m *GateFindUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GateFindUserRequest) ProtoMessage()               {}
func (*GateFindUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{1} }

type GateFindUserResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Users  []string        `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *GateFindUserResponse) Reset()                    { *m = GateFindUserResponse{} }
func (m *GateFindUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GateFindUserResponse) ProtoMessage()               {}
func (*GateFindUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{2} }

func (m *GateFindUserResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateFriendRequest struct {
	UserID  int64    `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	Operate Relation `protobuf:"varint,2,opt,name=Operate,json=operate,proto3,enum=candy.meta.Relation" json:"Operate,omitempty"`
	Msg     string   `protobuf:"bytes,3,opt,name=Msg,json=msg,proto3" json:"Msg,omitempty"`
}

func (m *GateFriendRequest) Reset()                    { *m = GateFriendRequest{} }
func (m *GateFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*GateFriendRequest) ProtoMessage()               {}
func (*GateFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{3} }

type GateFriendResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateFriendResponse) Reset()                    { *m = GateFriendResponse{} }
func (m *GateFriendResponse) String() string            { return proto.CompactTextString(m) }
func (*GateFriendResponse) ProtoMessage()               {}
func (*GateFriendResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{4} }

func (m *GateFriendResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateCreateGroupRequest struct {
	GroupName string `protobuf:"bytes,1,opt,name=GroupName,json=groupName,proto3" json:"GroupName,omitempty"`
}

func (m *GateCreateGroupRequest) Reset()                    { *m = GateCreateGroupRequest{} }
func (m *GateCreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GateCreateGroupRequest) ProtoMessage()               {}
func (*GateCreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{5} }

type GateCreateGroupResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
}

func (m *GateCreateGroupResponse) Reset()                    { *m = GateCreateGroupResponse{} }
func (m *GateCreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GateCreateGroupResponse) ProtoMessage()               {}
func (*GateCreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{6} }

func (m *GateCreateGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateRegisterRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User,json=user,proto3" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password,proto3" json:"Password,omitempty"`
}

func (m *GateRegisterRequest) Reset()                    { *m = GateRegisterRequest{} }
func (m *GateRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*GateRegisterRequest) ProtoMessage()               {}
func (*GateRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{7} }

type GateRegisterResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
}

func (m *GateRegisterResponse) Reset()                    { *m = GateRegisterResponse{} }
func (m *GateRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*GateRegisterResponse) ProtoMessage()               {}
func (*GateRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{8} }

func (m *GateRegisterResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUpdateUserInfoRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=NickName,json=nickName,proto3" json:"NickName,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=Avatar,json=avatar,proto3" json:"Avatar,omitempty"`
}

func (m *GateUpdateUserInfoRequest) Reset()                    { *m = GateUpdateUserInfoRequest{} }
func (m *GateUpdateUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserInfoRequest) ProtoMessage()               {}
func (*GateUpdateUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{9} }

type GateUpdateUserInfoResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUpdateUserInfoResponse) Reset()                    { *m = GateUpdateUserInfoResponse{} }
func (m *GateUpdateUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateUserInfoResponse) ProtoMessage()               {}
func (*GateUpdateUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{10} }

func (m *GateUpdateUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUpdateUserPasswordRequest struct {
	Name        string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=Password,json=password,proto3" json:"Password,omitempty"`
	NewPassword string `protobuf:"bytes,3,opt,name=NewPassword,json=newPassword,proto3" json:"NewPassword,omitempty"`
}

func (m *GateUpdateUserPasswordRequest) Reset()         { *m = GateUpdateUserPasswordRequest{} }
func (m *GateUpdateUserPasswordRequest) String() string { return proto.CompactTextString(m) }
func (*GateUpdateUserPasswordRequest) ProtoMessage()    {}
func (*GateUpdateUserPasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGate, []int{11}
}

type GateUpdateUserPasswordResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUpdateUserPasswordResponse) Reset()         { *m = GateUpdateUserPasswordResponse{} }
func (m *GateUpdateUserPasswordResponse) String() string { return proto.CompactTextString(m) }
func (*GateUpdateUserPasswordResponse) ProtoMessage()    {}
func (*GateUpdateUserPasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorGate, []int{12}
}

func (m *GateUpdateUserPasswordResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateGetUserInfoRequest struct {
	FindByName bool   `protobuf:"varint,1,opt,name=FindByName,json=findByName,proto3" json:"FindByName,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=UserName,json=userName,proto3" json:"UserName,omitempty"`
	UserID     int64  `protobuf:"varint,3,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
}

func (m *GateGetUserInfoRequest) Reset()                    { *m = GateGetUserInfoRequest{} }
func (m *GateGetUserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GateGetUserInfoRequest) ProtoMessage()               {}
func (*GateGetUserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{13} }

type GateGetUserInfoResponse struct {
	Header    *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID        int64           `protobuf:"varint,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	User      string          `protobuf:"bytes,3,opt,name=User,json=user,proto3" json:"User,omitempty"`
	NickName  string          `protobuf:"bytes,4,opt,name=NickName,json=nickName,proto3" json:"NickName,omitempty"`
	Avatar    string          `protobuf:"bytes,5,opt,name=Avatar,json=avatar,proto3" json:"Avatar,omitempty"`
	Signature string          `protobuf:"bytes,6,opt,name=Signature,json=signature,proto3" json:"Signature,omitempty"`
}

func (m *GateGetUserInfoResponse) Reset()                    { *m = GateGetUserInfoResponse{} }
func (m *GateGetUserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GateGetUserInfoResponse) ProtoMessage()               {}
func (*GateGetUserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{14} }

func (m *GateGetUserInfoResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUserLoginRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User,json=user,proto3" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,json=password,proto3" json:"Password,omitempty"`
	// 设备号
	Device string `protobuf:"bytes,3,opt,name=Device,json=device,proto3" json:"Device,omitempty"`
}

func (m *GateUserLoginRequest) Reset()                    { *m = GateUserLoginRequest{} }
func (m *GateUserLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUserLoginRequest) ProtoMessage()               {}
func (*GateUserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{15} }

// GateUserLoginResponse ID userID, Token sessionID.
type GateUserLoginResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Token  int64           `protobuf:"varint,3,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
}

func (m *GateUserLoginResponse) Reset()                    { *m = GateUserLoginResponse{} }
func (m *GateUserLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUserLoginResponse) ProtoMessage()               {}
func (*GateUserLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{16} }

func (m *GateUserLoginResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// GateUserLogoutRequest ID userID, Token sessionID.
type GateUserLogoutRequest struct {
	ID    int64 `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Token int64 `protobuf:"varint,2,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
}

func (m *GateUserLogoutRequest) Reset()                    { *m = GateUserLogoutRequest{} }
func (m *GateUserLogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUserLogoutRequest) ProtoMessage()               {}
func (*GateUserLogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{17} }

type GateUserLogoutResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUserLogoutResponse) Reset()                    { *m = GateUserLogoutResponse{} }
func (m *GateUserLogoutResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUserLogoutResponse) ProtoMessage()               {}
func (*GateUserLogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{18} }

func (m *GateUserLogoutResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateUploadFileRequest struct {
	File []byte `protobuf:"bytes,1,opt,name=File,json=file,proto3" json:"File,omitempty"`
}

func (m *GateUploadFileRequest) Reset()                    { *m = GateUploadFileRequest{} }
func (m *GateUploadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUploadFileRequest) ProtoMessage()               {}
func (*GateUploadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{19} }

type GateUploadFileResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUploadFileResponse) Reset()                    { *m = GateUploadFileResponse{} }
func (m *GateUploadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUploadFileResponse) ProtoMessage()               {}
func (*GateUploadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{20} }

func (m *GateUploadFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateCheckFileRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=Names,json=names" json:"Names,omitempty"`
}

func (m *GateCheckFileRequest) Reset()                    { *m = GateCheckFileRequest{} }
func (m *GateCheckFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GateCheckFileRequest) ProtoMessage()               {}
func (*GateCheckFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{21} }

type GateCheckFileResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=Header,json=header" json:"Header,omitempty"`
	Names  []string        `protobuf:"bytes,2,rep,name=Names,json=names" json:"Names,omitempty"`
}

func (m *GateCheckFileResponse) Reset()                    { *m = GateCheckFileResponse{} }
func (m *GateCheckFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GateCheckFileResponse) ProtoMessage()               {}
func (*GateCheckFileResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{22} }

func (m *GateCheckFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateDownloadFileRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=Names,json=names" json:"Names,omitempty"`
}

func (m *GateDownloadFileRequest) Reset()                    { *m = GateDownloadFileRequest{} }
func (m *GateDownloadFileRequest) String() string            { return proto.CompactTextString(m) }
func (*GateDownloadFileRequest) ProtoMessage()               {}
func (*GateDownloadFileRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{23} }

type GateDownloadFileResponse struct {
	Header *ResponseHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Files  map[string][]byte `protobuf:"bytes,2,rep,name=Files,json=files" json:"Files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GateDownloadFileResponse) Reset()                    { *m = GateDownloadFileResponse{} }
func (m *GateDownloadFileResponse) String() string            { return proto.CompactTextString(m) }
func (*GateDownloadFileResponse) ProtoMessage()               {}
func (*GateDownloadFileResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{24} }

func (m *GateDownloadFileResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GateDownloadFileResponse) GetFiles() map[string][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

type GateLoadMessageRequest struct {
	ID      int64 `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Reverse bool  `protobuf:"varint,2,opt,name=Reverse,json=reverse,proto3" json:"Reverse,omitempty"`
}

func (m *GateLoadMessageRequest) Reset()                    { *m = GateLoadMessageRequest{} }
func (m *GateLoadMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*GateLoadMessageRequest) ProtoMessage()               {}
func (*GateLoadMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{25} }

type GateLoadMessageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Msgs   []*PushMessage  `protobuf:"bytes,2,rep,name=Msgs,json=msgs" json:"Msgs,omitempty"`
}

func (m *GateLoadMessageResponse) Reset()                    { *m = GateLoadMessageResponse{} }
func (m *GateLoadMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*GateLoadMessageResponse) ProtoMessage()               {}
func (*GateLoadMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{26} }

func (m *GateLoadMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GateLoadMessageResponse) GetMsgs() []*PushMessage {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type GateLoadGroupListRequest struct {
}

func (m *GateLoadGroupListRequest) Reset()                    { *m = GateLoadGroupListRequest{} }
func (m *GateLoadGroupListRequest) String() string            { return proto.CompactTextString(m) }
func (*GateLoadGroupListRequest) ProtoMessage()               {}
func (*GateLoadGroupListRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{27} }

type GateLoadGroupListResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Groups []*GroupInfo    `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *GateLoadGroupListResponse) Reset()                    { *m = GateLoadGroupListResponse{} }
func (m *GateLoadGroupListResponse) String() string            { return proto.CompactTextString(m) }
func (*GateLoadGroupListResponse) ProtoMessage()               {}
func (*GateLoadGroupListResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{28} }

func (m *GateLoadGroupListResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GateLoadGroupListResponse) GetGroups() []*GroupInfo {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GateLoadFriendListRequest struct {
}

func (m *GateLoadFriendListRequest) Reset()                    { *m = GateLoadFriendListRequest{} }
func (m *GateLoadFriendListRequest) String() string            { return proto.CompactTextString(m) }
func (*GateLoadFriendListRequest) ProtoMessage()               {}
func (*GateLoadFriendListRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{29} }

type GateLoadFriendListResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Users  []int64         `protobuf:"varint,2,rep,packed,name=users" json:"users,omitempty"`
}

func (m *GateLoadFriendListResponse) Reset()                    { *m = GateLoadFriendListResponse{} }
func (m *GateLoadFriendListResponse) String() string            { return proto.CompactTextString(m) }
func (*GateLoadFriendListResponse) ProtoMessage()               {}
func (*GateLoadFriendListResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{30} }

func (m *GateLoadFriendListResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GateSendMessageRequest struct {
	Msg *Message `protobuf:"bytes,1,opt,name=Msg,json=msg" json:"Msg,omitempty"`
}

func (m *GateSendMessageRequest) Reset()                    { *m = GateSendMessageRequest{} }
func (m *GateSendMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*GateSendMessageRequest) ProtoMessage()               {}
func (*GateSendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{31} }

func (m *GateSendMessageRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type GateSendMessageResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
}

func (m *GateSendMessageResponse) Reset()                    { *m = GateSendMessageResponse{} }
func (m *GateSendMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*GateSendMessageResponse) ProtoMessage()               {}
func (*GateSendMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{32} }

func (m *GateSendMessageResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

//
// 邀请用户加入, 可以批量邀请，附加邀请消息
// ID Add Users[UID] Msg
//
// 用户申请加入群
// ID Add nil Msg
//
// 管理员通过用户申请入群的请求
// ID Confirm Users[UID]
//
// 用户同意入群的邀请
// ID Confirm nil
//
// 用户退出群
// ID Del nil
//
// 踢用户出群
// ID Del Users[UID]
type GateGroupRequest struct {
	ID      int64    `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Operate Relation `protobuf:"varint,2,opt,name=Operate,json=operate,proto3,enum=candy.meta.Relation" json:"Operate,omitempty"`
	Msg     string   `protobuf:"bytes,3,opt,name=Msg,json=msg,proto3" json:"Msg,omitempty"`
	Users   []int64  `protobuf:"varint,4,rep,packed,name=Users,json=users" json:"Users,omitempty"`
}

func (m *GateGroupRequest) Reset()                    { *m = GateGroupRequest{} }
func (m *GateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GateGroupRequest) ProtoMessage()               {}
func (*GateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{33} }

type GateGroupResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateGroupResponse) Reset()                    { *m = GateGroupResponse{} }
func (m *GateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GateGroupResponse) ProtoMessage()               {}
func (*GateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{34} }

func (m *GateGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 创建群
type GateGroupCreateRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
}

func (m *GateGroupCreateRequest) Reset()                    { *m = GateGroupCreateRequest{} }
func (m *GateGroupCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*GateGroupCreateRequest) ProtoMessage()               {}
func (*GateGroupCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{35} }

type GateGroupCreateResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ID     int64           `protobuf:"varint,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
}

func (m *GateGroupCreateResponse) Reset()                    { *m = GateGroupCreateResponse{} }
func (m *GateGroupCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*GateGroupCreateResponse) ProtoMessage()               {}
func (*GateGroupCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{36} }

func (m *GateGroupCreateResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 解散群
type GateGroupDeleteRequest struct {
	ID int64 `protobuf:"varint,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
}

func (m *GateGroupDeleteRequest) Reset()                    { *m = GateGroupDeleteRequest{} }
func (m *GateGroupDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*GateGroupDeleteRequest) ProtoMessage()               {}
func (*GateGroupDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{37} }

type GateGroupDeleteResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateGroupDeleteResponse) Reset()                    { *m = GateGroupDeleteResponse{} }
func (m *GateGroupDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*GateGroupDeleteResponse) ProtoMessage()               {}
func (*GateGroupDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{38} }

func (m *GateGroupDeleteResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 更新用户签名
type GateUpdateSignatureRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=Signature,json=signature,proto3" json:"Signature,omitempty"`
}

func (m *GateUpdateSignatureRequest) Reset()                    { *m = GateUpdateSignatureRequest{} }
func (m *GateUpdateSignatureRequest) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateSignatureRequest) ProtoMessage()               {}
func (*GateUpdateSignatureRequest) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{39} }

type GateUpdateSignatureResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GateUpdateSignatureResponse) Reset()                    { *m = GateUpdateSignatureResponse{} }
func (m *GateUpdateSignatureResponse) String() string            { return proto.CompactTextString(m) }
func (*GateUpdateSignatureResponse) ProtoMessage()               {}
func (*GateUpdateSignatureResponse) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{40} }

func (m *GateUpdateSignatureResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*GateStreamRequest)(nil), "candy.meta.GateStreamRequest")
	proto.RegisterType((*GateFindUserRequest)(nil), "candy.meta.GateFindUserRequest")
	proto.RegisterType((*GateFindUserResponse)(nil), "candy.meta.GateFindUserResponse")
	proto.RegisterType((*GateFriendRequest)(nil), "candy.meta.GateFriendRequest")
	proto.RegisterType((*GateFriendResponse)(nil), "candy.meta.GateFriendResponse")
	proto.RegisterType((*GateCreateGroupRequest)(nil), "candy.meta.GateCreateGroupRequest")
	proto.RegisterType((*GateCreateGroupResponse)(nil), "candy.meta.GateCreateGroupResponse")
	proto.RegisterType((*GateRegisterRequest)(nil), "candy.meta.GateRegisterRequest")
	proto.RegisterType((*GateRegisterResponse)(nil), "candy.meta.GateRegisterResponse")
	proto.RegisterType((*GateUpdateUserInfoRequest)(nil), "candy.meta.GateUpdateUserInfoRequest")
	proto.RegisterType((*GateUpdateUserInfoResponse)(nil), "candy.meta.GateUpdateUserInfoResponse")
	proto.RegisterType((*GateUpdateUserPasswordRequest)(nil), "candy.meta.GateUpdateUserPasswordRequest")
	proto.RegisterType((*GateUpdateUserPasswordResponse)(nil), "candy.meta.GateUpdateUserPasswordResponse")
	proto.RegisterType((*GateGetUserInfoRequest)(nil), "candy.meta.GateGetUserInfoRequest")
	proto.RegisterType((*GateGetUserInfoResponse)(nil), "candy.meta.GateGetUserInfoResponse")
	proto.RegisterType((*GateUserLoginRequest)(nil), "candy.meta.GateUserLoginRequest")
	proto.RegisterType((*GateUserLoginResponse)(nil), "candy.meta.GateUserLoginResponse")
	proto.RegisterType((*GateUserLogoutRequest)(nil), "candy.meta.GateUserLogoutRequest")
	proto.RegisterType((*GateUserLogoutResponse)(nil), "candy.meta.GateUserLogoutResponse")
	proto.RegisterType((*GateUploadFileRequest)(nil), "candy.meta.GateUploadFileRequest")
	proto.RegisterType((*GateUploadFileResponse)(nil), "candy.meta.GateUploadFileResponse")
	proto.RegisterType((*GateCheckFileRequest)(nil), "candy.meta.GateCheckFileRequest")
	proto.RegisterType((*GateCheckFileResponse)(nil), "candy.meta.GateCheckFileResponse")
	proto.RegisterType((*GateDownloadFileRequest)(nil), "candy.meta.GateDownloadFileRequest")
	proto.RegisterType((*GateDownloadFileResponse)(nil), "candy.meta.GateDownloadFileResponse")
	proto.RegisterType((*GateLoadMessageRequest)(nil), "candy.meta.GateLoadMessageRequest")
	proto.RegisterType((*GateLoadMessageResponse)(nil), "candy.meta.GateLoadMessageResponse")
	proto.RegisterType((*GateLoadGroupListRequest)(nil), "candy.meta.GateLoadGroupListRequest")
	proto.RegisterType((*GateLoadGroupListResponse)(nil), "candy.meta.GateLoadGroupListResponse")
	proto.RegisterType((*GateLoadFriendListRequest)(nil), "candy.meta.GateLoadFriendListRequest")
	proto.RegisterType((*GateLoadFriendListResponse)(nil), "candy.meta.GateLoadFriendListResponse")
	proto.RegisterType((*GateSendMessageRequest)(nil), "candy.meta.GateSendMessageRequest")
	proto.RegisterType((*GateSendMessageResponse)(nil), "candy.meta.GateSendMessageResponse")
	proto.RegisterType((*GateGroupRequest)(nil), "candy.meta.GateGroupRequest")
	proto.RegisterType((*GateGroupResponse)(nil), "candy.meta.GateGroupResponse")
	proto.RegisterType((*GateGroupCreateRequest)(nil), "candy.meta.GateGroupCreateRequest")
	proto.RegisterType((*GateGroupCreateResponse)(nil), "candy.meta.GateGroupCreateResponse")
	proto.RegisterType((*GateGroupDeleteRequest)(nil), "candy.meta.GateGroupDeleteRequest")
	proto.RegisterType((*GateGroupDeleteResponse)(nil), "candy.meta.GateGroupDeleteResponse")
	proto.RegisterType((*GateUpdateSignatureRequest)(nil), "candy.meta.GateUpdateSignatureRequest")
	proto.RegisterType((*GateUpdateSignatureResponse)(nil), "candy.meta.GateUpdateSignatureResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Gate service

type GateClient interface {
	Register(ctx context.Context, in *GateRegisterRequest, opts ...grpc.CallOption) (*GateRegisterResponse, error)
	// UpdateUserInfo 更新用户信息
	UpdateUserInfo(ctx context.Context, in *GateUpdateUserInfoRequest, opts ...grpc.CallOption) (*GateUpdateUserInfoResponse, error)
	// UpdateSignature 更新用户签名
	UpdateSignature(ctx context.Context, in *GateUpdateSignatureRequest, opts ...grpc.CallOption) (*GateUpdateSignatureResponse, error)
	// UpdateUserPassword 修改密码
	UpdateUserPassword(ctx context.Context, in *GateUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GateUpdateUserPasswordResponse, error)
	// GetUserInfo 查询用户信息
	GetUserInfo(ctx context.Context, in *GateGetUserInfoRequest, opts ...grpc.CallOption) (*GateGetUserInfoResponse, error)
	Login(ctx context.Context, in *GateUserLoginRequest, opts ...grpc.CallOption) (*GateUserLoginResponse, error)
	Logout(ctx context.Context, in *GateUserLogoutRequest, opts ...grpc.CallOption) (*GateUserLogoutResponse, error)
	// FindUser 添加好友前先查找出来对应的ID.
	FindUser(ctx context.Context, in *GateFindUserRequest, opts ...grpc.CallOption) (*GateFindUserResponse, error)
	// SendMessage 发送消息
	SendMessage(ctx context.Context, in *GateSendMessageRequest, opts ...grpc.CallOption) (*GateSendMessageResponse, error)
	// Stream 连接成功后立刻调用Stream, 开启推送
	Stream(ctx context.Context, in *GateStreamRequest, opts ...grpc.CallOption) (Gate_StreamClient, error)
	// Friend 好友的添加，删除、确认、拒绝.
	Friend(ctx context.Context, in *GateFriendRequest, opts ...grpc.CallOption) (*GateFriendResponse, error)
	// 加载好友列表
	LoadFriendList(ctx context.Context, in *GateLoadFriendListRequest, opts ...grpc.CallOption) (*GateLoadFriendListResponse, error)
	// Group 添加，邀请，退出, 踢出
	Group(ctx context.Context, in *GateGroupRequest, opts ...grpc.CallOption) (*GateGroupResponse, error)
	// GroupCreate 创建群
	GroupCreate(ctx context.Context, in *GateGroupCreateRequest, opts ...grpc.CallOption) (*GateGroupCreateResponse, error)
	// GroupDelete 删除群，解散群
	GroupDelete(ctx context.Context, in *GateGroupDeleteRequest, opts ...grpc.CallOption) (*GateGroupDeleteResponse, error)
	// LoadGroupList 加载群组列表
	LoadGroupList(ctx context.Context, in *GateLoadGroupListRequest, opts ...grpc.CallOption) (*GateLoadGroupListResponse, error)
	// UploadFile 客户端上传文件接口，一次一个图片.
	UploadFile(ctx context.Context, in *GateUploadFileRequest, opts ...grpc.CallOption) (*GateUploadFileResponse, error)
	// CheckFile 客户端检测文件是否存在，文件的临时ID和md5, 服务器返回不存在的文件ID.
	CheckFile(ctx context.Context, in *GateCheckFileRequest, opts ...grpc.CallOption) (*GateCheckFileResponse, error)
	// DownloadFile 客户端下载文件，传入ID，返回具体文件内容.
	DownloadFile(ctx context.Context, in *GateDownloadFileRequest, opts ...grpc.CallOption) (*GateDownloadFileResponse, error)
	// ID 参照消息ID，每次可逆序(旧消息)或正序(新消息)接收100条
	// 如果ID为0，就逆序返回旧的100条消息
	LoadMessage(ctx context.Context, in *GateLoadMessageRequest, opts ...grpc.CallOption) (*GateLoadMessageResponse, error)
	// Push notifer 调用的接口, 如果用户不在，要返回错误.
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type gateClient struct {
	cc *grpc.ClientConn
}

func NewGateClient(cc *grpc.ClientConn) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) Register(ctx context.Context, in *GateRegisterRequest, opts ...grpc.CallOption) (*GateRegisterResponse, error) {
	out := new(GateRegisterResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateUserInfo(ctx context.Context, in *GateUpdateUserInfoRequest, opts ...grpc.CallOption) (*GateUpdateUserInfoResponse, error) {
	out := new(GateUpdateUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateSignature(ctx context.Context, in *GateUpdateSignatureRequest, opts ...grpc.CallOption) (*GateUpdateSignatureResponse, error) {
	out := new(GateUpdateSignatureResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateSignature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UpdateUserPassword(ctx context.Context, in *GateUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GateUpdateUserPasswordResponse, error) {
	out := new(GateUpdateUserPasswordResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UpdateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GetUserInfo(ctx context.Context, in *GateGetUserInfoRequest, opts ...grpc.CallOption) (*GateGetUserInfoResponse, error) {
	out := new(GateGetUserInfoResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Login(ctx context.Context, in *GateUserLoginRequest, opts ...grpc.CallOption) (*GateUserLoginResponse, error) {
	out := new(GateUserLoginResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Logout(ctx context.Context, in *GateUserLogoutRequest, opts ...grpc.CallOption) (*GateUserLogoutResponse, error) {
	out := new(GateUserLogoutResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) FindUser(ctx context.Context, in *GateFindUserRequest, opts ...grpc.CallOption) (*GateFindUserResponse, error) {
	out := new(GateFindUserResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/FindUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendMessage(ctx context.Context, in *GateSendMessageRequest, opts ...grpc.CallOption) (*GateSendMessageResponse, error) {
	out := new(GateSendMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Stream(ctx context.Context, in *GateStreamRequest, opts ...grpc.CallOption) (Gate_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gate_serviceDesc.Streams[0], c.cc, "/candy.meta.Gate/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gate_StreamClient interface {
	Recv() (*PushMessage, error)
	grpc.ClientStream
}

type gateStreamClient struct {
	grpc.ClientStream
}

func (x *gateStreamClient) Recv() (*PushMessage, error) {
	m := new(PushMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gateClient) Friend(ctx context.Context, in *GateFriendRequest, opts ...grpc.CallOption) (*GateFriendResponse, error) {
	out := new(GateFriendResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Friend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) LoadFriendList(ctx context.Context, in *GateLoadFriendListRequest, opts ...grpc.CallOption) (*GateLoadFriendListResponse, error) {
	out := new(GateLoadFriendListResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/LoadFriendList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Group(ctx context.Context, in *GateGroupRequest, opts ...grpc.CallOption) (*GateGroupResponse, error) {
	out := new(GateGroupResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Group", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GroupCreate(ctx context.Context, in *GateGroupCreateRequest, opts ...grpc.CallOption) (*GateGroupCreateResponse, error) {
	out := new(GateGroupCreateResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/GroupCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) GroupDelete(ctx context.Context, in *GateGroupDeleteRequest, opts ...grpc.CallOption) (*GateGroupDeleteResponse, error) {
	out := new(GateGroupDeleteResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/GroupDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) LoadGroupList(ctx context.Context, in *GateLoadGroupListRequest, opts ...grpc.CallOption) (*GateLoadGroupListResponse, error) {
	out := new(GateLoadGroupListResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/LoadGroupList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) UploadFile(ctx context.Context, in *GateUploadFileRequest, opts ...grpc.CallOption) (*GateUploadFileResponse, error) {
	out := new(GateUploadFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/UploadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) CheckFile(ctx context.Context, in *GateCheckFileRequest, opts ...grpc.CallOption) (*GateCheckFileResponse, error) {
	out := new(GateCheckFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/CheckFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) DownloadFile(ctx context.Context, in *GateDownloadFileRequest, opts ...grpc.CallOption) (*GateDownloadFileResponse, error) {
	out := new(GateDownloadFileResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/DownloadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) LoadMessage(ctx context.Context, in *GateLoadMessageRequest, opts ...grpc.CallOption) (*GateLoadMessageResponse, error) {
	out := new(GateLoadMessageResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/LoadMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Gate/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gate service

type GateServer interface {
	Register(context.Context, *GateRegisterRequest) (*GateRegisterResponse, error)
	// UpdateUserInfo 更新用户信息
	UpdateUserInfo(context.Context, *GateUpdateUserInfoRequest) (*GateUpdateUserInfoResponse, error)
	// UpdateSignature 更新用户签名
	UpdateSignature(context.Context, *GateUpdateSignatureRequest) (*GateUpdateSignatureResponse, error)
	// UpdateUserPassword 修改密码
	UpdateUserPassword(context.Context, *GateUpdateUserPasswordRequest) (*GateUpdateUserPasswordResponse, error)
	// GetUserInfo 查询用户信息
	GetUserInfo(context.Context, *GateGetUserInfoRequest) (*GateGetUserInfoResponse, error)
	Login(context.Context, *GateUserLoginRequest) (*GateUserLoginResponse, error)
	Logout(context.Context, *GateUserLogoutRequest) (*GateUserLogoutResponse, error)
	// FindUser 添加好友前先查找出来对应的ID.
	FindUser(context.Context, *GateFindUserRequest) (*GateFindUserResponse, error)
	// SendMessage 发送消息
	SendMessage(context.Context, *GateSendMessageRequest) (*GateSendMessageResponse, error)
	// Stream 连接成功后立刻调用Stream, 开启推送
	Stream(*GateStreamRequest, Gate_StreamServer) error
	// Friend 好友的添加，删除、确认、拒绝.
	Friend(context.Context, *GateFriendRequest) (*GateFriendResponse, error)
	// 加载好友列表
	LoadFriendList(context.Context, *GateLoadFriendListRequest) (*GateLoadFriendListResponse, error)
	// Group 添加，邀请，退出, 踢出
	Group(context.Context, *GateGroupRequest) (*GateGroupResponse, error)
	// GroupCreate 创建群
	GroupCreate(context.Context, *GateGroupCreateRequest) (*GateGroupCreateResponse, error)
	// GroupDelete 删除群，解散群
	GroupDelete(context.Context, *GateGroupDeleteRequest) (*GateGroupDeleteResponse, error)
	// LoadGroupList 加载群组列表
	LoadGroupList(context.Context, *GateLoadGroupListRequest) (*GateLoadGroupListResponse, error)
	// UploadFile 客户端上传文件接口，一次一个图片.
	UploadFile(context.Context, *GateUploadFileRequest) (*GateUploadFileResponse, error)
	// CheckFile 客户端检测文件是否存在，文件的临时ID和md5, 服务器返回不存在的文件ID.
	CheckFile(context.Context, *GateCheckFileRequest) (*GateCheckFileResponse, error)
	// DownloadFile 客户端下载文件，传入ID，返回具体文件内容.
	DownloadFile(context.Context, *GateDownloadFileRequest) (*GateDownloadFileResponse, error)
	// ID 参照消息ID，每次可逆序(旧消息)或正序(新消息)接收100条
	// 如果ID为0，就逆序返回旧的100条消息
	LoadMessage(context.Context, *GateLoadMessageRequest) (*GateLoadMessageResponse, error)
	// Push notifer 调用的接口, 如果用户不在，要返回错误.
	Push(context.Context, *PushRequest) (*PushResponse, error)
}

func RegisterGateServer(s *grpc.Server, srv GateServer) {
	s.RegisterService(&_Gate_serviceDesc, srv)
}

func _Gate_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Register(ctx, req.(*GateRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateUserInfo(ctx, req.(*GateUpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUpdateSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateSignature(ctx, req.(*GateUpdateSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UpdateUserPassword(ctx, req.(*GateUpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateGetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GetUserInfo(ctx, req.(*GateGetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Login(ctx, req.(*GateUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Logout(ctx, req.(*GateUserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateFindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).FindUser(ctx, req.(*GateFindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateSendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendMessage(ctx, req.(*GateSendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GateServer).Stream(m, &gateStreamServer{stream})
}

type Gate_StreamServer interface {
	Send(*PushMessage) error
	grpc.ServerStream
}

type gateStreamServer struct {
	grpc.ServerStream
}

func (x *gateStreamServer) Send(m *PushMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Gate_Friend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Friend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Friend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Friend(ctx, req.(*GateFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_LoadFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateLoadFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).LoadFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/LoadFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).LoadFriendList(ctx, req.(*GateLoadFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Group_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Group(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Group",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Group(ctx, req.(*GateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/GroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GroupCreate(ctx, req.(*GateGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_GroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateGroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/GroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GroupDelete(ctx, req.(*GateGroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_LoadGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateLoadGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).LoadGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/LoadGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).LoadGroupList(ctx, req.(*GateLoadGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).UploadFile(ctx, req.(*GateUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_CheckFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateCheckFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).CheckFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/CheckFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).CheckFile(ctx, req.(*GateCheckFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateDownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).DownloadFile(ctx, req.(*GateDownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_LoadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateLoadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).LoadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/LoadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).LoadMessage(ctx, req.(*GateLoadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Gate/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Gate_Register_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Gate_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdateSignature",
			Handler:    _Gate_UpdateSignature_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Gate_UpdateUserPassword_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Gate_GetUserInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Gate_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Gate_Logout_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _Gate_FindUser_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Gate_SendMessage_Handler,
		},
		{
			MethodName: "Friend",
			Handler:    _Gate_Friend_Handler,
		},
		{
			MethodName: "LoadFriendList",
			Handler:    _Gate_LoadFriendList_Handler,
		},
		{
			MethodName: "Group",
			Handler:    _Gate_Group_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _Gate_GroupCreate_Handler,
		},
		{
			MethodName: "GroupDelete",
			Handler:    _Gate_GroupDelete_Handler,
		},
		{
			MethodName: "LoadGroupList",
			Handler:    _Gate_LoadGroupList_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Gate_UploadFile_Handler,
		},
		{
			MethodName: "CheckFile",
			Handler:    _Gate_CheckFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _Gate_DownloadFile_Handler,
		},
		{
			MethodName: "LoadMessage",
			Handler:    _Gate_LoadMessage_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Gate_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Gate_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptorGate,
}

func (m *GateStreamRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateStreamRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	if m.Token != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.Token))
	}
	return i, nil
}

func (m *GateFindUserRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateFindUserRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(len(m.User)))
		i += copy(data[i:], m.User)
	}
	return i, nil
}

func (m *GateFindUserResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateFindUserResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Users) > 0 {
		for _, s := range m.Users {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *GateFriendRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateFriendRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGate(data, i, uint64(m.UserID))
	}
	if m.Operate != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.Operate))
	}
	if len(m.Msg) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Msg)))
		i += copy(data[i:], m.Msg)
	}
	return i, nil
}

func (m *GateFriendResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateFriendResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n2, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GateCreateGroupRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateCreateGroupRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(len(m.GroupName)))
		i += copy(data[i:], m.GroupName)
	}
	return i, nil
}

func (m *GateCreateGroupResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateCreateGroupResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n3, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	return i, nil
}

func (m *GateRegisterRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateRegisterRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(len(m.User)))
		i += copy(data[i:], m.User)
	}
	if len(m.Password) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	return i, nil
}

func (m *GateRegisterResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateRegisterResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n4, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	return i, nil
}

func (m *GateUpdateUserInfoRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUpdateUserInfoRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.NickName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGate(data, i, uint64(len(m.NickName)))
		i += copy(data[i:], m.NickName)
	}
	if len(m.Avatar) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Avatar)))
		i += copy(data[i:], m.Avatar)
	}
	return i, nil
}

func (m *GateUpdateUserInfoResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUpdateUserInfoResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n5, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GateUpdateUserPasswordRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUpdateUserPasswordRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Password) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if len(m.NewPassword) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGate(data, i, uint64(len(m.NewPassword)))
		i += copy(data[i:], m.NewPassword)
	}
	return i, nil
}

func (m *GateUpdateUserPasswordResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUpdateUserPasswordResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n6, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GateGetUserInfoRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateGetUserInfoRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FindByName {
		data[i] = 0x8
		i++
		if m.FindByName {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.UserName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGate(data, i, uint64(len(m.UserName)))
		i += copy(data[i:], m.UserName)
	}
	if m.UserID != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintGate(data, i, uint64(m.UserID))
	}
	return i, nil
}

func (m *GateGetUserInfoResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateGetUserInfoResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n7, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	if len(m.User) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGate(data, i, uint64(len(m.User)))
		i += copy(data[i:], m.User)
	}
	if len(m.NickName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintGate(data, i, uint64(len(m.NickName)))
		i += copy(data[i:], m.NickName)
	}
	if len(m.Avatar) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Avatar)))
		i += copy(data[i:], m.Avatar)
	}
	if len(m.Signature) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Signature)))
		i += copy(data[i:], m.Signature)
	}
	return i, nil
}

func (m *GateUserLoginRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUserLoginRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(len(m.User)))
		i += copy(data[i:], m.User)
	}
	if len(m.Password) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if len(m.Device) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Device)))
		i += copy(data[i:], m.Device)
	}
	return i, nil
}

func (m *GateUserLoginResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUserLoginResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n8, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.ID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	if m.Token != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintGate(data, i, uint64(m.Token))
	}
	return i, nil
}

func (m *GateUserLogoutRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUserLogoutRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	if m.Token != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.Token))
	}
	return i, nil
}

func (m *GateUserLogoutResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUserLogoutResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n9, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *GateUploadFileRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUploadFileRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(len(m.File)))
		i += copy(data[i:], m.File)
	}
	return i, nil
}

func (m *GateUploadFileResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUploadFileResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n10, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *GateCheckFileRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateCheckFileRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *GateCheckFileResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateCheckFileResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n11, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *GateDownloadFileRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateDownloadFileRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *GateDownloadFileResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateDownloadFileResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n12, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Files) > 0 {
		for k, _ := range m.Files {
			data[i] = 0x12
			i++
			v := m.Files[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovGate(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovGate(uint64(len(k))) + byteSize
			i = encodeVarintGate(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintGate(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if len(v) > 0 {
				data[i] = 0x12
				i++
				i = encodeVarintGate(data, i, uint64(len(v)))
				i += copy(data[i:], v)
			}
		}
	}
	return i, nil
}

func (m *GateLoadMessageRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateLoadMessageRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	if m.Reverse {
		data[i] = 0x10
		i++
		if m.Reverse {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GateLoadMessageResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateLoadMessageResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n13, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Msgs) > 0 {
		for _, msg := range m.Msgs {
			data[i] = 0x12
			i++
			i = encodeVarintGate(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GateLoadGroupListRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateLoadGroupListRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GateLoadGroupListResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateLoadGroupListResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n14, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			data[i] = 0x12
			i++
			i = encodeVarintGate(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GateLoadFriendListRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateLoadFriendListRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GateLoadFriendListResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateLoadFriendListResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n15, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.Users) > 0 {
		data17 := make([]byte, len(m.Users)*10)
		var j16 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				data17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			data17[j16] = uint8(num)
			j16++
		}
		data[i] = 0x12
		i++
		i = encodeVarintGate(data, i, uint64(j16))
		i += copy(data[i:], data17[:j16])
	}
	return i, nil
}

func (m *GateSendMessageRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateSendMessageRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Msg.Size()))
		n18, err := m.Msg.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *GateSendMessageResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateSendMessageResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n19, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.ID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	return i, nil
}

func (m *GateGroupRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateGroupRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	if m.Operate != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.Operate))
	}
	if len(m.Msg) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Msg)))
		i += copy(data[i:], m.Msg)
	}
	if len(m.Users) > 0 {
		data21 := make([]byte, len(m.Users)*10)
		var j20 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				data21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			data21[j20] = uint8(num)
			j20++
		}
		data[i] = 0x22
		i++
		i = encodeVarintGate(data, i, uint64(j20))
		i += copy(data[i:], data21[:j20])
	}
	return i, nil
}

func (m *GateGroupResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateGroupResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n22, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *GateGroupCreateRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateGroupCreateRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *GateGroupCreateResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateGroupCreateResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n23, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.ID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	return i, nil
}

func (m *GateGroupDeleteRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateGroupDeleteRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGate(data, i, uint64(m.ID))
	}
	return i, nil
}

func (m *GateGroupDeleteResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateGroupDeleteResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n24, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *GateUpdateSignatureRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUpdateSignatureRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Signature) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGate(data, i, uint64(len(m.Signature)))
		i += copy(data[i:], m.Signature)
	}
	return i, nil
}

func (m *GateUpdateSignatureResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GateUpdateSignatureResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintGate(data, i, uint64(m.Header.Size()))
		n25, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func encodeFixed64Gate(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gate(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGate(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *GateStreamRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	if m.Token != 0 {
		n += 1 + sovGate(uint64(m.Token))
	}
	return n
}

func (m *GateFindUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateFindUserResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, s := range m.Users {
			l = len(s)
			n += 1 + l + sovGate(uint64(l))
		}
	}
	return n
}

func (m *GateFriendRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovGate(uint64(m.UserID))
	}
	if m.Operate != 0 {
		n += 1 + sovGate(uint64(m.Operate))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateFriendResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateCreateGroupRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateCreateGroupResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	return n
}

func (m *GateRegisterRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateRegisterResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	return n
}

func (m *GateUpdateUserInfoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateUpdateUserInfoResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateUpdateUserPasswordRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.NewPassword)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateUpdateUserPasswordResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateGetUserInfoRequest) Size() (n int) {
	var l int
	_ = l
	if m.FindByName {
		n += 2
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	if m.UserID != 0 {
		n += 1 + sovGate(uint64(m.UserID))
	}
	return n
}

func (m *GateGetUserInfoResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateUserLoginRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateUserLoginResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	if m.Token != 0 {
		n += 1 + sovGate(uint64(m.Token))
	}
	return n
}

func (m *GateUserLogoutRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	if m.Token != 0 {
		n += 1 + sovGate(uint64(m.Token))
	}
	return n
}

func (m *GateUserLogoutResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateUploadFileRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateUploadFileResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateCheckFileRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovGate(uint64(l))
		}
	}
	return n
}

func (m *GateCheckFileResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovGate(uint64(l))
		}
	}
	return n
}

func (m *GateDownloadFileRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovGate(uint64(l))
		}
	}
	return n
}

func (m *GateDownloadFileResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.Files) > 0 {
		for k, v := range m.Files {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovGate(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovGate(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGate(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GateLoadMessageRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	if m.Reverse {
		n += 2
	}
	return n
}

func (m *GateLoadMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovGate(uint64(l))
		}
	}
	return n
}

func (m *GateLoadGroupListRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GateLoadGroupListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovGate(uint64(l))
		}
	}
	return n
}

func (m *GateLoadFriendListRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GateLoadFriendListResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovGate(uint64(e))
		}
		n += 1 + sovGate(uint64(l)) + l
	}
	return n
}

func (m *GateSendMessageRequest) Size() (n int) {
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateSendMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	return n
}

func (m *GateGroupRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	if m.Operate != 0 {
		n += 1 + sovGate(uint64(m.Operate))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovGate(uint64(e))
		}
		n += 1 + sovGate(uint64(l)) + l
	}
	return n
}

func (m *GateGroupResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateGroupCreateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateGroupCreateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	return n
}

func (m *GateGroupDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGate(uint64(m.ID))
	}
	return n
}

func (m *GateGroupDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateUpdateSignatureRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *GateUpdateSignatureResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func sovGate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGate(x uint64) (n int) {
	return sovGate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GateStreamRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Token |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateFindUserRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateFindUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateFindUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateFindUserResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateFindUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateFindUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateFriendRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateFriendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateFriendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UserID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operate", wireType)
			}
			m.Operate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Operate |= (Relation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateFriendResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateFriendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateFriendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateCreateGroupRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateCreateGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateCreateGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateCreateGroupResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateCreateGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateCreateGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateRegisterRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateRegisterResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUpdateUserInfoRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUpdateUserInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUpdateUserInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUpdateUserInfoResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUpdateUserInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUpdateUserInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUpdateUserPasswordRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUpdateUserPasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUpdateUserPasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassword = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUpdateUserPasswordResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUpdateUserPasswordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUpdateUserPasswordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGetUserInfoRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGetUserInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGetUserInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindByName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FindByName = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UserID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGetUserInfoResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGetUserInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGetUserInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUserLoginRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUserLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUserLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUserLoginResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUserLoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUserLoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Token |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUserLogoutRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUserLogoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUserLogoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Token |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUserLogoutResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUserLogoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUserLogoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUploadFileRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUploadFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUploadFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], data[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUploadFileResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUploadFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUploadFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateCheckFileRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateCheckFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateCheckFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateCheckFileResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateCheckFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateCheckFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateDownloadFileRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateDownloadFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateDownloadFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateDownloadFileResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateDownloadFileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateDownloadFileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGate
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Files == nil {
				m.Files = make(map[string][]byte)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapbyteLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapbyteLen |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intMapbyteLen := int(mapbyteLen)
				if intMapbyteLen < 0 {
					return ErrInvalidLengthGate
				}
				postbytesIndex := iNdEx + intMapbyteLen
				if postbytesIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := make([]byte, mapbyteLen)
				copy(mapvalue, data[iNdEx:postbytesIndex])
				iNdEx = postbytesIndex
				m.Files[mapkey] = mapvalue
			} else {
				var mapvalue []byte
				m.Files[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateLoadMessageRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateLoadMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateLoadMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reverse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reverse = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateLoadMessageResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateLoadMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateLoadMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &PushMessage{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateLoadGroupListRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateLoadGroupListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateLoadGroupListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateLoadGroupListResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateLoadGroupListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateLoadGroupListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupInfo{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateLoadFriendListRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateLoadFriendListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateLoadFriendListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateLoadFriendListResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateLoadFriendListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateLoadFriendListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateSendMessageRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateSendMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateSendMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &Message{}
			}
			if err := m.Msg.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateSendMessageResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateSendMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateSendMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGroupRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operate", wireType)
			}
			m.Operate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Operate |= (Relation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGroupResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGroupCreateRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGroupCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGroupCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGroupCreateResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGroupCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGroupCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGroupDeleteRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGroupDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGroupDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateGroupDeleteResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateGroupDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateGroupDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUpdateSignatureRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUpdateSignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUpdateSignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateUpdateSignatureResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateUpdateSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateUpdateSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGate(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGate(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGate   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gate.proto", fileDescriptorGate) }

var fileDescriptorGate = []byte{
	// 1312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xc6, 0xf6, 0xda, 0xb1, 0x8f, 0xd3, 0x52, 0xa6, 0x69, 0x6a, 0xb6, 0x8d, 0x09, 0xd3, 0x06,
	0x52, 0x5a, 0x5c, 0x14, 0x24, 0xd4, 0x22, 0x21, 0x44, 0xea, 0xc4, 0x41, 0x8a, 0xd3, 0xb0, 0x69,
	0x2a, 0x51, 0xf1, 0xb7, 0xb5, 0x27, 0xce, 0xca, 0xf6, 0xae, 0xb3, 0xb3, 0x4e, 0x94, 0x5e, 0xf0,
	0x0c, 0xbc, 0x13, 0x37, 0xdc, 0xc1, 0x23, 0xa0, 0xf0, 0x1a, 0x5c, 0xa0, 0xd9, 0xd9, 0xb1, 0x67,
	0x67, 0x76, 0x9d, 0x92, 0xf5, 0x8d, 0xe5, 0x33, 0x73, 0xfe, 0xe6, 0xfc, 0xcc, 0xf9, 0x66, 0x01,
	0x7a, 0x76, 0x40, 0x1a, 0x23, 0xdf, 0x0b, 0x3c, 0x04, 0x1d, 0xdb, 0xed, 0x9e, 0x37, 0x86, 0x24,
	0xb0, 0xcd, 0xc5, 0x8e, 0x37, 0x1c, 0x7a, 0x2e, 0xdf, 0xc1, 0x4f, 0xe1, 0xbd, 0x96, 0x1d, 0x90,
	0x83, 0xc0, 0x27, 0xf6, 0xd0, 0x22, 0x27, 0x63, 0x42, 0x03, 0x74, 0x1d, 0xf2, 0xdf, 0x36, 0x6b,
	0xb9, 0xd5, 0xdc, 0x7a, 0xc1, 0xca, 0x3b, 0x4d, 0xb4, 0x04, 0xc5, 0x17, 0x5e, 0x9f, 0xb8, 0xb5,
	0x7c, 0xb8, 0x54, 0x0c, 0x18, 0x81, 0x1f, 0xc0, 0x4d, 0x26, 0xba, 0xed, 0xb8, 0xdd, 0x43, 0x4a,
	0x7c, 0x21, 0x8c, 0xc0, 0x60, 0x64, 0x28, 0x5e, 0xb1, 0x8c, 0x31, 0x25, 0x3e, 0xfe, 0x05, 0x96,
	0xe2, 0xac, 0x74, 0xe4, 0xb9, 0x94, 0xa0, 0x0d, 0x28, 0x1d, 0x13, 0xbb, 0x1b, 0x71, 0x57, 0x37,
	0xcc, 0xc6, 0xd4, 0xd1, 0x86, 0xe0, 0xda, 0x09, 0x39, 0xac, 0x88, 0x93, 0x39, 0xc3, 0x74, 0xd2,
	0x5a, 0x7e, 0xb5, 0xb0, 0x5e, 0xb1, 0x38, 0x81, 0x87, 0xfc, 0x1c, 0xdb, 0xbe, 0x43, 0xdc, 0xae,
	0x70, 0x65, 0x19, 0x4a, 0xcc, 0xdc, 0xe4, 0x2c, 0xa5, 0x71, 0x48, 0xa1, 0x06, 0x2c, 0x3c, 0x1f,
	0x11, 0xdf, 0x0e, 0x48, 0x78, 0xa2, 0xeb, 0x1b, 0x4b, 0x71, 0xbb, 0x03, 0x3b, 0x70, 0x3c, 0xd7,
	0x5a, 0xf0, 0x38, 0x13, 0xba, 0x01, 0x85, 0x36, 0xed, 0xd5, 0x0a, 0xe1, 0x89, 0x0a, 0x43, 0xda,
	0xc3, 0x3b, 0x80, 0x64, 0x73, 0x57, 0x3f, 0x0e, 0xfe, 0x02, 0x96, 0x99, 0xa6, 0x67, 0x3e, 0xb1,
	0x03, 0xd2, 0xf2, 0xbd, 0xf1, 0x48, 0x78, 0x7f, 0x17, 0x2a, 0x21, 0xbd, 0x67, 0x0f, 0x49, 0x14,
	0xcd, 0x4a, 0x4f, 0x2c, 0xe0, 0x1f, 0xe1, 0xb6, 0x26, 0x97, 0x21, 0xaa, 0x3c, 0xe5, 0x79, 0x91,
	0x72, 0xbc, 0xc5, 0x93, 0x6b, 0x91, 0x9e, 0x43, 0x83, 0x99, 0xc9, 0x45, 0x26, 0x94, 0xf7, 0x6d,
	0x4a, 0xcf, 0x3c, 0xbf, 0x1b, 0x2a, 0xa8, 0x58, 0xe5, 0x51, 0x44, 0xe3, 0x57, 0x3c, 0xf1, 0x53,
	0x35, 0x73, 0x74, 0xb1, 0x03, 0xef, 0x33, 0xdd, 0x87, 0xa3, 0x2e, 0xfb, 0x65, 0x99, 0x75, 0x8f,
	0x3c, 0xc9, 0x51, 0x29, 0x6e, 0x86, 0x6b, 0x0f, 0x09, 0x73, 0x74, 0xcf, 0xe9, 0xf4, 0xc3, 0xf5,
	0xc8, 0x51, 0x37, 0xa2, 0x59, 0xa9, 0x7c, 0x73, 0x6a, 0x07, 0xb6, 0x1f, 0x65, 0xb9, 0x64, 0x87,
	0x14, 0xde, 0x07, 0x33, 0xc9, 0x48, 0x86, 0x84, 0x9f, 0xc0, 0x4a, 0x5c, 0xa3, 0x08, 0xde, 0x25,
	0xae, 0xa7, 0xc5, 0x18, 0xad, 0x42, 0x75, 0x8f, 0x9c, 0x4d, 0xb6, 0xb9, 0xff, 0x55, 0x77, 0xba,
	0x84, 0x5f, 0x40, 0x3d, 0xcd, 0x64, 0x86, 0x83, 0x0c, 0x78, 0xe5, 0xb6, 0x48, 0xa0, 0x06, 0xbf,
	0x0e, 0xc0, 0x5a, 0x7d, 0xf3, 0x7c, 0x72, 0x8e, 0xb2, 0x05, 0x47, 0x93, 0x15, 0x76, 0x1a, 0x26,
	0x22, 0x27, 0x62, 0x1c, 0xd1, 0x52, 0xcf, 0x16, 0xe4, 0x9e, 0xc5, 0xbf, 0xe7, 0x78, 0xc1, 0xc7,
	0xcc, 0xcd, 0xaf, 0x9a, 0x26, 0x95, 0x5d, 0x88, 0x57, 0xf6, 0xa4, 0x60, 0x8c, 0xd4, 0x82, 0x29,
	0xca, 0x05, 0xc3, 0xba, 0xf6, 0xc0, 0xe9, 0xb9, 0x76, 0x30, 0xf6, 0x49, 0xad, 0xc4, 0xbb, 0x96,
	0x8a, 0x05, 0xfc, 0x13, 0xef, 0x07, 0x66, 0x69, 0xd7, 0xeb, 0x39, 0xee, 0x15, 0xfb, 0x8a, 0x59,
	0x6f, 0x92, 0x53, 0xa7, 0x43, 0x44, 0xb9, 0x76, 0x43, 0x0a, 0x9f, 0xc0, 0x2d, 0x45, 0xff, 0x1c,
	0x43, 0x34, 0x19, 0x03, 0x05, 0x79, 0x0c, 0x7c, 0x15, 0x33, 0xe9, 0x8d, 0x83, 0xff, 0x37, 0x45,
	0x76, 0x79, 0x15, 0xc9, 0xe2, 0x19, 0x6a, 0xf2, 0x61, 0xe4, 0xcc, 0x68, 0xe0, 0xd9, 0xdd, 0x6d,
	0x67, 0x40, 0xa4, 0x00, 0x33, 0x32, 0x54, 0xb5, 0x68, 0x19, 0x47, 0xce, 0x80, 0x4c, 0x4c, 0x4b,
	0xcc, 0x19, 0x4c, 0x3f, 0xe2, 0xa9, 0x7d, 0x76, 0x4c, 0x3a, 0x7d, 0xd9, 0xf2, 0x12, 0x14, 0x59,
	0xc1, 0xd0, 0x5a, 0x8e, 0xcf, 0x2b, 0xd6, 0xcf, 0x14, 0xdb, 0xdc, 0x51, 0x89, 0x7b, 0x6a, 0x7a,
	0xe7, 0x0a, 0x23, 0x91, 0x9b, 0xc8, 0xcb, 0x26, 0x1e, 0xf3, 0x86, 0x69, 0x7a, 0x67, 0xae, 0x1a,
	0x8d, 0x64, 0x9f, 0xfe, 0xcc, 0x41, 0x4d, 0x97, 0xc8, 0x50, 0x40, 0x5b, 0x50, 0x64, 0x3a, 0xb8,
	0x5f, 0xd5, 0x8d, 0xc7, 0xb2, 0x48, 0x9a, 0xa1, 0x46, 0x28, 0xb1, 0xe5, 0x06, 0xfe, 0xb9, 0x55,
	0x64, 0x69, 0xa2, 0xe6, 0x13, 0x76, 0x9d, 0x88, 0x45, 0x36, 0x8c, 0xfb, 0xe4, 0x3c, 0xea, 0x14,
	0xf6, 0x97, 0x9d, 0xe6, 0xd4, 0x1e, 0x8c, 0xf9, 0x5d, 0xb2, 0x68, 0x71, 0xe2, 0xcb, 0xfc, 0x93,
	0x1c, 0xde, 0xe4, 0x19, 0xde, 0xf5, 0xec, 0x6e, 0x9b, 0x50, 0x6a, 0xf7, 0x48, 0x5a, 0x71, 0xd6,
	0x60, 0xc1, 0x22, 0xa7, 0xc4, 0xa7, 0x5c, 0x4b, 0xd9, 0x5a, 0xf0, 0x39, 0x89, 0xdf, 0xf0, 0x30,
	0xc6, 0x74, 0x64, 0x88, 0xc9, 0x43, 0x30, 0xda, 0xb4, 0x27, 0x42, 0x72, 0x5b, 0x96, 0xd8, 0x1f,
	0xd3, 0x63, 0x61, 0xc2, 0x18, 0xd2, 0x1e, 0xc5, 0x26, 0x4f, 0x08, 0xb3, 0x1d, 0x8e, 0xf8, 0x5d,
	0x87, 0x8a, 0xf6, 0xc2, 0xbf, 0xf2, 0xf1, 0xa7, 0xec, 0x65, 0xf0, 0xec, 0x53, 0x28, 0x85, 0xf0,
	0x42, 0xf8, 0x76, 0x2b, 0x96, 0x2e, 0xb6, 0x13, 0x5e, 0xba, 0x11, 0x13, 0xbe, 0x33, 0xb5, 0xcf,
	0x61, 0x90, 0xec, 0xdc, 0x11, 0x1f, 0x9b, 0xea, 0xe6, 0xbc, 0x60, 0x5f, 0x41, 0xc0, 0xbe, 0xaf,
	0x79, 0x82, 0x0f, 0x88, 0xab, 0x26, 0x78, 0x8d, 0x63, 0x36, 0x6e, 0xe0, 0xa6, 0x6c, 0x40, 0x30,
	0x86, 0x40, 0x2e, 0x82, 0x51, 0x31, 0x05, 0x73, 0xc4, 0x28, 0x6f, 0xe0, 0x46, 0x4b, 0xc5, 0x75,
	0x6a, 0xe9, 0x65, 0x46, 0xa3, 0x2c, 0x36, 0x87, 0x61, 0x6c, 0x0c, 0x39, 0x36, 0x2d, 0x0e, 0x89,
	0x33, 0x63, 0x43, 0xfc, 0x28, 0x1a, 0xf4, 0x4c, 0x11, 0xc7, 0x9b, 0x33, 0xa0, 0x8a, 0x88, 0x68,
	0x8c, 0x7b, 0x8e, 0x11, 0x5d, 0x97, 0x9c, 0x69, 0x92, 0x01, 0x09, 0x94, 0x96, 0x9e, 0x72, 0xb6,
	0x25, 0x47, 0x04, 0x67, 0x86, 0x28, 0xec, 0xc9, 0x48, 0x70, 0x32, 0xe2, 0x67, 0x81, 0xb6, 0x18,
	0x14, 0xc8, 0xab, 0x50, 0xe0, 0x3b, 0xb8, 0x93, 0xa8, 0xef, 0xea, 0x2e, 0x6e, 0xfc, 0x7b, 0x0d,
	0x0c, 0xa6, 0x13, 0xb5, 0xa1, 0x2c, 0x20, 0x37, 0xfa, 0x40, 0xbd, 0x75, 0x15, 0x4c, 0x6f, 0xae,
	0xa6, 0x33, 0x44, 0xbe, 0xfc, 0x0c, 0xd7, 0xe3, 0x00, 0x18, 0xad, 0xa9, 0x32, 0x89, 0x28, 0xdc,
	0xfc, 0xe8, 0x32, 0xb6, 0xc8, 0xc0, 0x6b, 0x78, 0x57, 0x89, 0x03, 0x4a, 0x11, 0x55, 0x03, 0x6f,
	0x7e, 0x7c, 0x29, 0x5f, 0x64, 0xa3, 0x0f, 0x48, 0x07, 0xc0, 0xe8, 0x41, 0xba, 0x87, 0x0a, 0x2e,
	0x37, 0x3f, 0x79, 0x1b, 0xd6, 0xc8, 0xd8, 0x4b, 0xa8, 0x4a, 0x40, 0x15, 0x61, 0x55, 0x54, 0x07,
	0xcd, 0xe6, 0xbd, 0x99, 0x3c, 0x91, 0xde, 0x5d, 0x28, 0x86, 0xb8, 0x0e, 0x69, 0x49, 0x53, 0x21,
	0xa5, 0xf9, 0xe1, 0x0c, 0x8e, 0x48, 0xdb, 0x73, 0x28, 0x71, 0xcc, 0x85, 0xd2, 0x98, 0xa7, 0x70,
	0xce, 0xc4, 0xb3, 0x58, 0x22, 0x85, 0x6d, 0x28, 0x8b, 0x37, 0xbe, 0x5e, 0x77, 0xca, 0x87, 0x02,
	0xbd, 0xee, 0xb4, 0xcf, 0x03, 0x2f, 0xa1, 0x2a, 0x5d, 0xcc, 0x7a, 0x14, 0xf5, 0x6b, 0x5f, 0x8f,
	0x62, 0xd2, 0xcd, 0xbe, 0x09, 0x25, 0xfe, 0xc1, 0x03, 0xad, 0x68, 0xec, 0xf2, 0x87, 0x10, 0x33,
	0x6d, 0x3c, 0x7f, 0x96, 0x43, 0x2d, 0x28, 0xf1, 0xc9, 0xa6, 0xeb, 0x88, 0x7d, 0x84, 0x30, 0xeb,
	0x69, 0xdb, 0xd3, 0xe6, 0x8a, 0x8f, 0x49, 0xbd, 0xb9, 0x12, 0x67, 0xac, 0xde, 0x5c, 0x29, 0xd3,
	0xb6, 0x09, 0xc5, 0xf0, 0x0e, 0x44, 0x77, 0xb5, 0x0a, 0x93, 0xc6, 0x92, 0xb9, 0x92, 0xb2, 0x2b,
	0x55, 0xf4, 0xf4, 0x4a, 0x4f, 0xa8, 0x68, 0x6d, 0x3a, 0x24, 0x54, 0x74, 0xc2, 0x4c, 0x10, 0x7a,
	0xf9, 0x0d, 0x9d, 0xa2, 0x37, 0x76, 0xd1, 0xa7, 0xe8, 0x55, 0xae, 0xf8, 0x1f, 0xe0, 0x5a, 0x0c,
	0x1a, 0xa1, 0xfb, 0x49, 0xe1, 0x52, 0x51, 0x95, 0xb9, 0x76, 0x09, 0x57, 0xa4, 0xfd, 0x00, 0x60,
	0xfa, 0x6c, 0x48, 0xe8, 0x1e, 0xf5, 0xfd, 0x91, 0xd0, 0x3d, 0xfa, 0xab, 0x63, 0x1f, 0x2a, 0x93,
	0xf7, 0x80, 0xde, 0xe0, 0xea, 0xc3, 0x42, 0x6f, 0x70, 0xfd, 0x31, 0xf1, 0x3d, 0x2c, 0xca, 0x18,
	0x1b, 0xdd, 0x9b, 0x8d, 0xc0, 0xb9, 0xde, 0xfb, 0x6f, 0x03, 0xd3, 0x59, 0xde, 0x24, 0x48, 0xac,
	0xe7, 0x4d, 0xc7, 0xdc, 0x7a, 0xde, 0x92, 0x30, 0xf5, 0x53, 0x30, 0x58, 0xa3, 0x21, 0xad, 0xf5,
	0x84, 0x96, 0x9a, 0xbe, 0xc1, 0x45, 0x37, 0x97, 0xff, 0xb8, 0xa8, 0xe7, 0xfe, 0xba, 0xa8, 0xe7,
	0xfe, 0xbe, 0xa8, 0xe7, 0x7e, 0xfb, 0xa7, 0xfe, 0xce, 0x2b, 0x83, 0x31, 0xbd, 0x2e, 0x85, 0x9f,
	0x3a, 0x3f, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x57, 0x9a, 0xa3, 0x78, 0x12, 0x15, 0x00, 0x00,
}
