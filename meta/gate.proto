syntax = "proto3";
package candy.meta;

option go_package = "meta";

import "common.proto";


service Gate {
    rpc Register (GateRegisterRequest) returns (GateRegisterResponse);

    // UpdateUserInfo 更新用户信息
    rpc UpdateUserInfo (GateUpdateUserInfoRequest) returns (GateUpdateUserInfoResponse);

    // UpdateSignature 更新用户签名
    rpc UpdateSignature(GateUpdateSignatureRequest) returns (GateUpdateSignatureResponse);

    // UpdateUserPassword 修改密码
    rpc UpdateUserPassword (GateUpdateUserPasswordRequest) returns (GateUpdateUserPasswordResponse);

    // GetUserInfo 查询用户信息
    rpc GetUserInfo (GateGetUserInfoRequest) returns (GateGetUserInfoResponse);

    rpc Login (GateUserLoginRequest) returns (GateUserLoginResponse);
    rpc Logout (GateUserLogoutRequest) returns (GateUserLogoutResponse);

    // FindUser 添加好友前先查找出来对应的ID.
    rpc FindUser (GateFindUserRequest) returns (GateFindUserResponse);

    // SendMessage 发送消息
    rpc SendMessage(GateSendMessageRequest) returns (GateSendMessageResponse);

    // Stream 连接成功后立刻调用Stream, 开启推送
    rpc Stream(GateStreamRequest) returns (stream PushMessage);

    // Friend 好友的添加，删除、确认、拒绝.
    rpc Friend (GateFriendRequest) returns (GateFriendResponse);
    // 加载好友列表
    rpc LoadFriendList (GateLoadFriendListRequest) returns (GateLoadFriendListResponse);

    // Group 添加，邀请，退出, 踢出
    rpc Group (GateGroupRequest) returns (GateGroupResponse);

    //GroupCreate 创建群
    rpc GroupCreate (GateGroupCreateRequest) returns (GateGroupCreateResponse);
    // GroupDelete 删除群，解散群
    rpc GroupDelete (GateGroupDeleteRequest) returns (GateGroupDeleteResponse);

    // LoadGroupList 加载群组列表
    rpc LoadGroupList (GateLoadGroupListRequest) returns (GateLoadGroupListResponse);


    // UploadFile 客户端上传文件接口，一次一个图片.
    rpc UploadFile (GateUploadFileRequest) returns (GateUploadFileResponse);
    // CheckFile 客户端检测文件是否存在，文件的临时ID和md5, 服务器返回不存在的文件ID.
    rpc CheckFile (GateCheckFileRequest) returns (GateCheckFileResponse);
    // DownloadFile 客户端下载文件，传入ID，返回具体文件内容.
    rpc DownloadFile (GateDownloadFileRequest) returns (GateDownloadFileResponse);

    // ID 参照消息ID，每次可逆序(旧消息)或正序(新消息)接收100条
    // 如果ID为0，就逆序返回旧的100条消息
    rpc LoadMessage (GateLoadMessageRequest) returns (GateLoadMessageResponse);

    //Push notifer 调用的接口, 如果用户不在，要返回错误.
    rpc Push(PushRequest) returns (PushResponse);
}

// GateStreamRequest ID userID, token sessionID
message GateStreamRequest {
    int64   ID      = 1;
    int64   Token   = 2;
}

message GateFindUserRequest {
    string User = 1;
}

message GateFindUserResponse {
    ResponseHeader header = 1;
    repeated string users = 2;

}

message GateFriendRequest {
    int64       UserID  = 1;
    Relation    Operate = 2;
    string      Msg     = 3;
}

message GateFriendResponse {
    ResponseHeader header = 1;
}

message GateCreateGroupRequest {
    string GroupName = 1;
}


message GateCreateGroupResponse {
    ResponseHeader header = 1;
    int64 ID = 2;
}


message GateRegisterRequest {
    string User = 1;
    string Password = 2;
}

message GateRegisterResponse {
    ResponseHeader header = 1;
    int64 ID = 2;
}

message GateUpdateUserInfoRequest {
    string Name     = 1;
    string NickName = 2;
    string Avatar   = 3;
}

message GateUpdateUserInfoResponse {
    ResponseHeader header = 1;
}

message GateUpdateUserPasswordRequest {
    string Name         = 1;
    string Password     = 2;
    string NewPassword  = 3;
}

message GateUpdateUserPasswordResponse {
    ResponseHeader header = 1;
}

message GateGetUserInfoRequest {
    bool    FindByName  = 1;
    string  UserName    = 2;
    int64   UserID      = 3;
}

message GateGetUserInfoResponse {
    ResponseHeader  header      = 1;
    int64           ID          = 2;
    string          User        = 3;
    string          NickName    = 4;
    string          Avatar      = 5;
    string          Signature   = 6;
}



message GateUserLoginRequest {
    string User     = 1;
    string Password = 2;
    //设备号
    string Device   = 3; 
}

//GateUserLoginResponse ID userID, Token sessionID.
message GateUserLoginResponse {
    ResponseHeader header = 1;
    int64   ID      = 2;
    int64   Token   = 3;
}


//GateUserLogoutRequest ID userID, Token sessionID.
message GateUserLogoutRequest {
    int64 ID    = 1;
    int64 Token = 2;
}

message GateUserLogoutResponse {
    ResponseHeader header = 1;
}


message GateUploadFileRequest {
    bytes File = 1;
}

message GateUploadFileResponse {
    ResponseHeader header = 1;
}

message GateCheckFileRequest {
    repeated string Names = 1;
}

message GateCheckFileResponse {
    ResponseHeader Header = 1;
    repeated string Names = 2;
}


message GateDownloadFileRequest {
    repeated string Names = 1;
}

message GateDownloadFileResponse {
    ResponseHeader header = 1;
    map <string, bytes> Files = 2;
}



message GateLoadMessageRequest {
    int64 ID = 1;
    bool Reverse = 2;
}


message GateLoadMessageResponse {
    ResponseHeader header = 1;
    repeated PushMessage Msgs = 2;
}


message GateLoadGroupListRequest {
}

message GateLoadGroupListResponse {
    ResponseHeader      header = 1;
    repeated GroupInfo  groups = 2;
}

message GateLoadFriendListRequest {

}

message GateLoadFriendListResponse {
    ResponseHeader header = 1;
    repeated int64 users = 2;
}

message GateSendMessageRequest {
    Message Msg = 1;
}

message GateSendMessageResponse {
    ResponseHeader header = 1;
    int64 ID = 2;
}



/*
   邀请用户加入, 可以批量邀请，附加邀请消息
   ID Add Users[UID] Msg

   用户申请加入群
   ID Add nil Msg

   管理员通过用户申请入群的请求
   ID Confirm Users[UID]

   用户同意入群的邀请
   ID Confirm nil

   用户退出群
   ID Del nil

   踢用户出群
   ID Del Users[UID]
 */
message GateGroupRequest {
    int64       ID      = 1;
    Relation    Operate = 2;
    string      Msg     = 3;
    repeated    int64   Users  = 4;
}

message GateGroupResponse {
    ResponseHeader header = 1;
}

//创建群
message GateGroupCreateRequest {
    string Name = 1;
}

message GateGroupCreateResponse {
    ResponseHeader  header  = 1;
    int64           ID      = 2;
}

//解散群
message GateGroupDeleteRequest {
    int64   ID  = 2;
}

message GateGroupDeleteResponse {
    ResponseHeader  header  = 1;
}

//更新用户签名
message GateUpdateSignatureRequest {
    string Name             = 1;
    string Signature        = 2;
}

message GateUpdateSignatureResponse {
    ResponseHeader header = 1;
}

